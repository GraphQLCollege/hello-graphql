# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY


#
# Other Types
#

type AggregateRecipient {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createRecipient(data: RecipientCreateInput!): Recipient!
  updateManyRecipients(data: RecipientUpdateInput!, where: RecipientWhereInput!): BatchPayload!
  deleteManyRecipients(where: RecipientWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  recipients(where: RecipientWhereInput, orderBy: RecipientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipient]!
  recipientsConnection(where: RecipientWhereInput, orderBy: RecipientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipientConnection!
  node(id: ID!): Node
}

type Recipient {
  name: String!
}

type RecipientConnection {
  pageInfo: PageInfo!
  edges: [RecipientEdge]!
  aggregate: AggregateRecipient!
}

input RecipientCreateInput {
  name: String!
}

type RecipientEdge {
  node: Recipient!
  cursor: String!
}

enum RecipientOrderByInput {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RecipientPreviousValues {
  name: String!
}

type RecipientSubscriptionPayload {
  mutation: MutationType!
  node: Recipient
  updatedFields: [String!]
  previousValues: RecipientPreviousValues
}

input RecipientSubscriptionWhereInput {
  AND: [RecipientSubscriptionWhereInput!]
  OR: [RecipientSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipientWhereInput
}

input RecipientUpdateInput {
  name: String
}

input RecipientWhereInput {
  AND: [RecipientWhereInput!]
  OR: [RecipientWhereInput!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
}

type Subscription {
  recipient(where: RecipientSubscriptionWhereInput): RecipientSubscriptionPayload
}
